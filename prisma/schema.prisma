// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String              @id @default(uuid()) // This is the ID of the user created for the database
  userId             String              @unique // This is the ID of the user provided by the auth provider, which is clerk.com in this case
  email              String              @unique
  name               String?
  username           String?
  password           String
  imageUrl           String?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  posts              Post[]
  comments           Comment[]
  postlikes          PostLike[]
  commentLike        CommentLike[]
  collections        PostCollection[]
  discussions        Discussion[]
  discussionComments DiscussionComment[]
}

model Post {
  id          String           @id @default(uuid())
  content     String
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  author      User?            @relation(fields: [authorId], references: [id])
  authorId    String?
  tag         PostTag          @relation(fields: [tagId], references: [id])
  tagId       String
  comments    Comment[]
  likes       PostLike[]
  collections PostCollection[]
}

model PostTag {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  posts     Post[]
}

model PostLike {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  author    User?    @relation(fields: [authorId], references: [id])
  authorId  String?
  post      Post?    @relation(fields: [postId], references: [id])
  postId    String?
}

model Comment {
  id          String        @id @default(uuid())
  content     String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  author      User?         @relation(fields: [authorId], references: [id])
  authorId    String?
  post        Post?         @relation(fields: [postId], references: [id])
  postId      String?
  CommentLike CommentLike[]
}

model CommentLike {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  author    User?    @relation(fields: [authorId], references: [id])
  authorId  String?
  comment   Comment? @relation(fields: [commentId], references: [id])
  commentId String?
}

model PostCollection {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  posts     Post[]
  author    User?    @relation(fields: [authorId], references: [id])
  authorId  String?
}

model Discussion {
  id        String              @id @default(uuid())
  title     String
  content   String
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt
  author    User?               @relation(fields: [authorId], references: [id])
  authorId  String?
  comments  DiscussionComment[]
}

model DiscussionComment {
  id           String      @id @default(uuid())
  content      String
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  author       User?       @relation(fields: [authorId], references: [id])
  authorId     String?
  discussion   Discussion? @relation(fields: [discussionId], references: [id])
  discussionId String?
}
